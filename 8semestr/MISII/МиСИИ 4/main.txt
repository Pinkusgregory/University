:-dynamic
сообщено/2.
определить_операторы:-
	op(950, xfx, то),
	op(960, fx, если),
	op(970, xfx, '::').
:- определить_операторы.

найти1(H,Стек,сообщено(H)):-
	сообщено(H,да).
найти1(H,Стек,сообщено(H)):-
	запрашиваемая(H),
	not(сообщено(H,_)),
	спроси(H,Стек).
найти1(H,Стек,Факт :: H):-
	Факт :: H.
найти1(H,Стек,Правило :: если Д1 то H):-
	Правило :: если H1 то H,
	найти(H1,[Правило | Стек],Д1).
	
найти([],Стек,Дерево):-
	Дерево=[].
найти([H1|T],Стек,[Дерево1 | Дерево]):-
	найти1(H1,Стек,Дерево1),
	найти(T,Стек,Дерево).

запрашиваемая(H):-
	Факт :: признак(H).

спроси(H,Стек):-
	write(H),write('?'),nl,
	read(O),ответ(H,O,Стек).

ответ(H,да,Стек):-
	assert(сообщено(H,да)),!.
ответ(H,нет,Стек):-
	assert(сообщено(H,нет)),!,fail.

ответ(H,почему,[]):-
	!,
	write(' Вы задаете слишком много вопросов'),nl,
	спроси(H,[]).

ответ(P,почему,[H]):-
	!,
	write('моя гипотеза: '),
	write(H),nl,
	спроси(P,[]).

ответ(H,почему,[Правило | Стек]):-
	!,
	Правило :: если H1 то H2,
	write('пытаюсь доказать '), write(H2),nl,
	write('с помощью правила: '), write(Правило),nl,
	спроси(H,Стек).

ответ(H,_,Стек):-
	write(' правильный ответ: да, нет, почему'),nl,
	спроси(H,Стек).

как(H,Дерево):-
	как1(H,Дерево),!.

как(H,_):-
	write(H), 
	tab(2), 
	write('не доказано'), 
	nl.

как1(H,_):-
	сообщено(H,_),!,
	write(H),write('было введено'),nl.

как1(H,Факт :: H):-
	!,
	write(H), write( 'является фактом'), write(Факт),nl.

как1(H,[Правило :: если _ то H]):-
	!,
	write(H),write(' было доказано с помощью'),nl,
	Правило :: если H1 то H,
	отобрази_правило(Правило :: если H1 то H).

как1(H,[Правило :: если Дерево то _]):-
	как(H,Дерево).

как1(H,[]):- !.
как1(H,[Д1|Д2]):-
	как(H,[Д1]),!;
	как1(H,Д2).

отобрази_правило(Правило :: если H1 то H):-
	write(Правило), write( ':'), nl,
	write('если '), write(H1), nl,
	write('то '), write(H), nl.

инициализация:-
	retractall(сообщено(_,_)).

start:-
	reconsult('C:/eclipse_helios/workspace/lab8/src/rules.pl'),
	info,
	go_exp_sys.

go_exp_sys:-
	инициализация,
	Факт :: гипотеза(H),
	найти([H],[H],Дерево),
	write('решение:'), write(H), nl,
	объясни(Дерево),
	возврат.

объясни(Дерево):-
	write( 'объяснить ? [цель/нет]:'), nl,
	read(H),
	(H\=нет,!,как(H,Дерево),объясни(Дерево));
	!.

возврат:-
	write('Искать ещё решение [да/нет] ?: '), nl,
	read(нет).